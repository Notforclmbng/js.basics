//задание 1


let Tc = prompt('Привет!\nЗадай температуру в градусах по Цельсию:');
let Tf = (9 / 5) * Tc + 32;
alert('Температура ' + Tc + ' градуса(ов) по Цельсию равна температуре\n' + Tf + ' градуса(ов) по Фаренгейту');





// задание 2

let name = 'Василий';
let admin = name;
console.log(admin);





// задание 3

// Чему будет равно JS-выражение 1000 + "108"?

/*значение будет равно 1000108,
т.к. первая переменная это число, а вторая - строка.*/






// задание 4

/*  async - это логический атрибут, указывающий, что браузер должен, если возможно, загружать скрипт асинхронно.
Этот атрибут нельзя использовать, если атрибут src отсутствует (например, для встроенных скриптов).
Если он будет включен в этом случае, он не будет иметь никакого эффекта.
Браузеры обычно предполагают наихудший сценарий и загружают сценарии синхронно (т.е. async = "false") во время синтаксического анализа HTML.
Динамически вставленные скрипты (с использованием document.createElement ()) по умолчанию загружаются асинхронно,
поэтому для включения синхронной загрузки (т. Е. Скрипты загружаются в том порядке, в котором они были вставлены) установите async = "false".
См. Раздел «Совместимость браузера» для получения информации о поддержке браузером.
См. Также Асинхронные сценарии для asm.js.*/

//defer

/*Этот логический атрибут установлен, чтобы указать браузеру, что сценарий предназначен для выполнения после анализа документа, но перед запуском DOMContentLoaded.
Сценарии с атрибутом defer предотвратят запуск события DOMContentLoaded до тех пор, пока сценарий не загрузится и не завершит оценку.
Этот атрибут нельзя использовать, если атрибут src отсутствует (т.е. для встроенных скриптов), в этом случае он не будет иметь никакого эффекта.
Чтобы добиться аналогичного эффекта для динамически вставляемых скриптов, используйте вместо этого async = "false".
Скрипты с атрибутом defer будут выполняться в том порядке, в котором они указаны в документе. */